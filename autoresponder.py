# [REAL] - –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ EraFox: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ù–æ–≤—ã–º–∏ –ö–ª—é—á–∞–º–∏
import os
import asyncio
import logging
import random
import time
from telethon import TelegramClient, events

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ERAFOX: –í–°–¢–†–û–ï–ù–ù–´–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï (–û–ë–ù–û–í–õ–ï–ù–û) ===
API_ID = 27565611
API_HASH = '5f7c8476ca146158fb1aff3ff8eb4f84'
PHONE = '+380998627460'  # <-- –ù–û–í–´–ô –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê
PASSWORD = '–ü–µ–ª—å–º–µ–Ω–∏' 

SESSION_NAME = 'er_twin_session' 

# –ö–û–ù–ö–†–ï–¢–ù–´–ô –¢–ï–ö–°–¢ –ê–í–¢–û–û–¢–í–ï–¢–ê
AUTO_REPLY_MESSAGE = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
    "–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ.\n"
    ".–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫."
)

# [SIM] - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "–∂–∏–≤–æ–≥–æ" –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
REPLIED_USERS = {} 
COOLDOWN_SECONDS = 1800 # 30 –º–∏–Ω—É—Ç. 
TYPING_DELAY_RANGE = (1, 3) # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s',
                    level=logging.INFO)

# === –û–°–ù–û–í–ù–û–ô –ö–û–î ===
async def main():
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    
    logging.info("üîê –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telethon...")
    
    try:
        await client.start(phone=PHONE, password=PASSWORD)
    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return

    me = await client.get_me()
    logging.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{me.username or me.first_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
    print("üì± –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ EraFox –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–û–¢–í–ï–¢–ê: –¢–û–õ–¨–ö–û –õ–ò–ß–ù–´–ï –í–•–û–î–Ø–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –õ–Æ–î–ï–ô
    @client.on(events.NewMessage(incoming=True, private=True))
    async def handle_auto_reply(event):
        sender = await event.get_sender()
        user_id = sender.id
        current_time = time.time()
        
        # 1. –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–æ–≤ –∏ —Å–∞–º–æ–æ—Ç–≤–µ—Ç—ã
        if sender.bot or user_id == me.id:
            return
            
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω (30 –º–∏–Ω—É—Ç)
        if user_id in REPLIED_USERS and (current_time - REPLIED_USERS[user_id]) < COOLDOWN_SECONDS:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –∞–∫—Ç–∏–≤–µ–Ω –∫—É–ª–¥–∞—É–Ω –¥–ª—è {sender.username or user_id}.")
            return

        logging.info(f"üî• –í—Ö–æ–¥—è—â–µ–µ –õ–° –æ—Ç: {sender.username or user_id}. –¢–µ–∫—Å—Ç: '{event.text}'")

        # 3. [SIM] –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        typing_delay = random.uniform(*TYPING_DELAY_RANGE)
        async with client.action(event.chat_id, 'typing'):
            await asyncio.sleep(typing_delay) 
            
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        await event.reply(AUTO_REPLY_MESSAGE)
        
        REPLIED_USERS[user_id] = current_time
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender.username or user_id}.")

    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
